[tool.poetry]
name = "mcp-sandbox"
version = "0.1.0"
description = "MCP Server Sandbox"
authors = ["Lewis"]
readme = "README.md"
packages = [{include = "mcp_sandbox", from = "src"}]

[tool.poetry.dependencies]
python = "^3.12"
mcp = "^1.0.0"
anthropic = "^0.34.0"
python-dotenv = "^1.0.0"
httpx = "<0.28"

[tool.poetry.group.dev.dependencies]
pytest = "^8.0.0"
pytest-asyncio = "^0.23.0"
ruff = "^0.8.0"
isort = "^5.13.0"

[tool.poetry.scripts]
demo = "main:main"
chat = "main:chat"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"
asyncio_mode = "auto"
addopts = "-v --tb=short"

[tool.ruff]
target-version = "py312"
line-length = 88
exclude = [
    ".git",
    ".venv",
    "__pycache__",
    "*.pyc",
    ".pytest_cache",
    "build",
    "dist",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # Pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
    "PL",  # Pylint
    "SIM", # flake8-simplify
    "PTH", # flake8-use-pathlib
    "RUF", # Ruff-specific rules
]

ignore = [
    "E501",    # Line too long (handled by formatter)
    "PLR0913", # Too many arguments
    "PLR0912", # Too many branches
    "PLR0915", # Too many statements
    "PLR0911", # Too many return statements
    "PLR2004", # Magic value used in comparison
    "B008",    # Do not perform function calls in argument defaults
    "UP006",   # Use list instead of List for type annotations (keep for clarity)
    "UP007",   # Use X | Y for Union types (keep Union for clarity)
    "UP035",   # Use dict/list instead of Dict/List (keep for clarity)
    "RUF013",  # PEP 484 prohibits implicit Optional (allow for simplicity)
]

dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"tests/*" = [
    "S101",    # Use of assert in tests is expected
    "PLR2004", # Magic values in tests are OK
    "SLF001",  # Private member access in tests is OK
    "PLC0415", # Import inside function is OK in tests
    "PTH108",  # os.unlink is OK in tests (for compatibility)
]

"main.py" = [
    "T201",    # Print statements are OK in CLI
]

[tool.ruff.format]
quote-style = "double"
indent-style = "space"
skip-magic-trailing-comma = false
line-ending = "auto"

[tool.isort]
profile = "black"
line_length = 88
indent = 4
sections = ["FUTURE", "STDLIB", "THIRDPARTY", "FIRSTPARTY", "LOCALFOLDER"]
lines_after_imports = 2
force_sort_within_sections = true
multi_line_output = 3
include_trailing_comma = true
force_single_line = false
combine_star = true
order_by_type = true
src_paths = ["src"]
known_first_party = ["mcp_sandbox"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
